name: Evals Quick Test

on:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test-docker-compose:
    name: Test Docker Compose Networking
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment
        run: |
          cd packages/evals
          
          # Create minimal test environment
          cat > .env.test << EOF
          NODE_ENV=test
          DATABASE_URL=postgresql://postgres:password@db:5432/evals_test
          REDIS_URL=redis://redis:6379
          HOST_EXECUTION_METHOD=docker
          EOF

      - name: Build images
        run: |
          cd packages/evals
          docker compose build web runner

      - name: Start server services
        run: |
          cd packages/evals
          docker compose --profile server up -d

      - name: Test service connectivity
        run: |
          cd packages/evals
          
          # Wait for services
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until docker compose exec -T db pg_isready -U postgres; do sleep 2; done'
          
          echo "Waiting for Redis..."
          timeout 60 bash -c 'until docker compose exec -T redis redis-cli ping | grep -q PONG; do sleep 2; done'
          
          # Test inter-container networking
          echo "Testing database connection from web container..."
          docker compose exec -T web sh -c 'nc -z db 5432 && echo "✓ Database connection successful"'
          
          echo "Testing Redis connection from web container..."
          docker compose exec -T web sh -c 'nc -z redis 6379 && echo "✓ Redis connection successful"'
          
          # Test that web service can start (basic health check)
          echo "Testing web service startup..."
          timeout 30 bash -c 'until curl -f http://localhost:3000 2>/dev/null || curl -f http://localhost:3000/health 2>/dev/null; do sleep 2; done' || echo "Web service may not have health endpoint, continuing..."

      - name: Test runner container networking
        run: |
          cd packages/evals
          
          echo "Testing runner container can connect to services..."
          docker compose run --rm runner sh -c 'nc -z db 5432 && echo "✓ Runner -> Database connection successful"'
          docker compose run --rm runner sh -c 'nc -z redis 6379 && echo "✓ Runner -> Redis connection successful"'
          docker compose run --rm runner sh -c 'nc -z web 3000 && echo "✓ Runner -> Web service connection successful"'

      - name: Verify Docker socket access
        run: |
          cd packages/evals
          
          echo "Testing Docker socket access in runner..."
          docker compose run --rm runner docker --version
          docker compose run --rm runner docker ps

      - name: Show service status
        if: always()
        run: |
          cd packages/evals
          echo "=== Service Status ==="
          docker compose ps
          
          echo "=== Network Information ==="
          docker network ls | grep evals || echo "No evals network found"
          
          echo "=== Container Information ==="
          docker compose exec -T db sh -c 'echo "Database container hostname: $(hostname)"'
          docker compose exec -T redis sh -c 'echo "Redis container hostname: $(hostname)"'

      - name: Cleanup
        if: always()
        run: |
          cd packages/evals
          docker compose down -v --remove-orphans

  validate-compose-file:
    name: Validate Compose Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Docker Compose syntax
        run: |
          cd packages/evals
          docker compose config --quiet

      - name: Check service definitions
        run: |
          cd packages/evals
          
          # Verify all expected services are defined
          services=$(docker compose config --services | sort)
          expected_services="db redis runner web"
          
          echo "Defined services: $services"
          echo "Expected services: $expected_services"
          
          for service in $expected_services; do
            if ! echo "$services" | grep -q "^$service$"; then
              echo "ERROR: Service '$service' not found"
              exit 1
            fi
          done
          
          echo "✓ All expected services found"

      - name: Check profiles
        run: |
          cd packages/evals
          
          # Test profile configurations
          echo "Testing server profile..."
          docker compose --profile server config --services | sort
          
          echo "Testing runner profile..."  
          docker compose --profile runner config --services | sort
          
          echo "✓ Profiles validated"